// Definition of protos and RPC services for Obiew.

syntax = "proto3";

package obiew;

message EmptyMessage {}

message ServerConfig {
    string my_ip = 1;
    string obiew_port = 2;
    string paxos_port = 3;
    repeated string replica = 4;
}

enum OperationType {
    NOTSET = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
}

// A Comment under an Obiew Post.
message Comment {
    int32 comment_id = 1;
    int32 post_id = 2;
    int32 user_id = 3;
    string content = 4;
    string created = 5;
}

// A Like to an Obiew Post.
message Like {
    int32 like_id = 1;
    int32 post_id = 2;
    int32 user_id = 3;
    string created = 4;
}

// A Repost under an Obiew Post.
message Repost {
    int32 repost_id = 1;
    int32 post_id = 2;
    int32 user_id = 3;
    string content = 4;
    string created = 5;
}

// An Obiew Post.
message Post {
    int32 post_id = 1;
    int32 user_id = 2;
    string content = 3;
    int32 image_id = 4;  // Id for image look-up.
    string created = 5;
    Post original_post = 6;  // Only exist if the Post is a re-post
    int32 direct_repost_id =
        7;  // Should be 0 or null if the Post is not a re-post.
    int32 num_reposts = 8;
    int32 num_comments = 9;
    int32 num_likes = 10;
    repeated Repost repost = 11;
    repeated Comment comment = 12;
    repeated Like like = 13;
}

// UserStat displayed in User's Profile page.
message UserStat {
    int32 user_id = 1;
    int32 num_posts = 2;
    int32 num_following = 3;
    int32 num_followers = 4;
    repeated Post recent_posts = 5;
}

// A User.
message User {
    int32 user_id = 1;
    string password = 2;  // TODO: Encryption.
    string name = 3;
    int32 profile_picture = 4;  // Id for image look-up.
    string email = 5;
    string phone = 6;
    int32 num_posts = 7;
    int32 num_following = 8;
    int32 num_followers = 9;
    repeated Post recent_posts = 10;
}

// Get Feed Request.
message GetFeedRequest {
    User user = 1;  // Require: user_id
}

// Get Feed Response.
message GetFeedResponse {
    repeated Post post = 1;
}

// Get Post Request.
message GetPostRequest {
    Post post = 1;  // Require: post_id
}

// Get Post Response.
message GetPostResponse {
    Post post = 1;
}

// Set Post Request.
message SetPostRequest {
    Post post = 1;  // Require: user_d, content, (optional)direct_repost_id
    OperationType operation = 2;
}

// Set Post(s) Response.
message SetPostResponse {
    Post post = 1;
}

// Get UserStat Request.
message GetUserStatRequest {
    int32 user_id = 1;
}

// Get UserStat Response.
message GetUserStatResponse {
    UserStat user_stat = 1;
}

message RegisterRequest {
    User user = 1;  // Require: Name, Password, Email, Phone
}

message RegisterResponse {
    User user = 1;  // Contain: UserId, Name, Email, Phone
}

message LogInRequest {
    User user = 1;  // Require: Name, Password
}

message LogInResponse {
    User user = 1;  // Contain: UserId, Name, Email, Phone
}

// Get User Request.
message GetUserRequest {
    User user = 1;  // Require: UserId
}

// Get User Response.
message GetUserResponse {
    User user = 1;  // Contain: UserId, Name, Email, Phone, num_posts,
                    // num_following, num_followers, Posts
}

// Get Followers Request.
message GetFollowersRequest {
    User user = 1;  // Require: UserId
}

// Get Followers Response.
message GetFollowersResponse {
    repeated User user = 1;
}

// Get Followings Request.
message GetFollowingsRequest {
    User user = 1;  // Require: UserId
}

// Get Followings Response.
message GetFollowingsResponse {
    repeated User user = 1;
}

// Set User Request.
message SetUserRequest {
    User user = 1;  // Require: UserId, Name, Password, Email, Phone
    OperationType operation = 2;
}

// Set User Response.
message SetUserResponse {
    User user = 1;
}

// Set Like Request.
message SetLikeRequest {
    Like like = 1;  // Require: user_id, post_id
    OperationType operation = 2;
}

// Set Like Response.
message SetLikeResponse {
    Like like = 1;
}

// Set Comment Request.
message SetCommentRequest {
    Comment comment = 1;  // Require: user_id, post_id, content
    OperationType operation = 2;
}

// Set Comment Response.
message SetCommentResponse {
    Comment comment = 1;
}

// Set Follow Request.
message SetFollowRequest {
    User follower = 1;  // Require: user_id
    User followee = 2;  // Require: user_id
    OperationType operation = 3;
}

// Set Follow Response.
message SetFollowResponse {
    User follower = 1;
    User followee = 2;
    string created = 3;
}

// ELECT Coordinator for Paxos run
message ElectCoordinatorRequest {
    string coordinator = 1;
}

// GET Coordinator for Paxos run
message GetCoordinatorResponse {
    string coordinator = 1;
}

enum ProposalType {
    NONE = 0;
    COORDINATOR = 1;
    SQL = 2;
}

message Proposal {
    ProposalType type = 1;
    oneof request {
        RegisterRequest register_request = 2;
        SetUserRequest set_user_request = 3;
        SetPostRequest set_post_request = 4;
        SetCommentRequest set_comment_request = 5;
        SetLikeRequest set_like_request = 6;
        SetFollowRequest set_follow_request = 7;
    }
    oneof response {
        RegisterResponse register_response = 8;
        SetUserResponse set_user_response = 9;
        SetPostResponse set_post_response = 10;
        SetCommentResponse set_comment_response = 11;
        SetLikeResponse set_like_response = 12;
        SetFollowResponse set_follow_response = 13;
    }
    string coordinator = 14;
    string sql_query = 15;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
message PrepareRequest {
    int32 round = 1;
    int32 propose_id = 2;
    ProposalType type = 3;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// accepted_id: the highest accepted propose_id (if present).
// proposal: the proposal of last accepted proposal to set proposal for a key.
message PromiseResponse {
    int32 round = 1;
    int32 propose_id = 2;
    int32 accepted_id = 3;
    Proposal proposal = 4;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// proposal: the proposal proposed to set for a key.
message ProposeRequest {
    int32 round = 1;
    int32 propose_id = 2;
    Proposal proposal = 3;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// proposal: the proposal accepted to set for a key.
message AcceptResponse {
    int32 round = 1;
    int32 propose_id = 2;
    Proposal proposal = 3;
}

// acceptance: the accepted proposal to be executed by Learner.
message InformRequest {
    AcceptResponse acceptance = 1;
}

// acceptance: the accepted proposal to be executed by Learner.
message InformResponse {
    Proposal proposal = 1;
}

message PaxosLog {
    int32 promised_id = 1;
    int32 accepted_id = 2;
    Proposal proposal = 3;
    ProposalType type = 4;
}

message PaxosLogs {
    map<int32, PaxosLog> logs = 1;
}

message RecoverRequest {
}
message RecoverResponse {
    PaxosLogs sql_paxos_logs = 1;
    PaxosLogs cdnt_paxos_logs = 2;
}

// RPC Service for posts, comments, likes, and follows.
service Obiew {
    rpc Register(RegisterRequest) returns (RegisterResponse) {}

    rpc LogIn(LogInRequest) returns (LogInResponse) {}

    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    }  // Including Posts and Userstats

    rpc GetFollowers(GetFollowersRequest) returns (GetFollowersResponse) {}

    rpc GetFollowings(GetFollowingsRequest) returns (GetFollowingsResponse) {}

    rpc GetFeed(GetFeedRequest) returns (GetFeedResponse) {}

    rpc GetPost(GetPostRequest) returns (GetPostResponse) {
    }  // Including Comments, Likes and Reposts

    rpc SetUser(SetUserRequest) returns (SetUserResponse) {}

    rpc SetPost(SetPostRequest) returns (SetPostResponse) {}

    rpc SetComment(SetCommentRequest) returns (SetCommentResponse) {}

    rpc SetLike(SetLikeRequest) returns (SetLikeResponse) {}

    rpc SetFollow(SetFollowRequest) returns (SetFollowResponse) {}
}

// RPC Service for running MultiPaxos.
service MultiPaxos {
    rpc Register(RegisterRequest) returns (RegisterResponse) {}

    rpc LogIn(LogInRequest) returns (LogInResponse) {}

    rpc GetUser(GetUserRequest) returns (GetUserResponse) {}

    rpc GetFeed(GetFeedRequest) returns (GetFeedResponse) {}

    rpc GetPost(GetPostRequest) returns (GetPostResponse) {}

    rpc SetUser(SetUserRequest) returns (SetUserResponse) {}

    rpc SetPost(SetPostRequest) returns (SetPostResponse) {}

    rpc SetComment(SetCommentRequest) returns (SetCommentResponse) {}

    rpc SetLike(SetLikeRequest) returns (SetLikeResponse) {}

    rpc SetFollow(SetFollowRequest) returns (SetFollowResponse) {}

    rpc GetFollowers(GetFollowersRequest) returns (GetFollowersResponse) {}

    rpc GetFollowings(GetFollowingsRequest) returns (GetFollowingsResponse) {}

    // Elect Coordinator.
    rpc ElectCoordinator(ElectCoordinatorRequest) returns (EmptyMessage) {}
    // Get the current coordinator.
    rpc GetCoordinator(EmptyMessage) returns (GetCoordinatorResponse) {}
    // Phase 1. Proposer(Coordinator) -> Acceptors.
    rpc Prepare(PrepareRequest) returns (PromiseResponse) {}
    // Phase 2. Proposer(Coordinator) -> Acceptors.
    rpc Propose(ProposeRequest) returns (AcceptResponse) {}
    // Phase 3. Proposer(Coordinator) -> Learners.
    rpc Inform(InformRequest) returns (InformResponse) {}
    // Test if the server is available.
    rpc Ping(EmptyMessage) returns (EmptyMessage) {}
    // After brought up again, a server will catch up with others' logs.
    rpc Recover(RecoverRequest) returns (RecoverResponse) {}
}